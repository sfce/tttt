package us.cmcc.sms.cleaner.dao;

import us.cmcc.sms.cleaner.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table THREAD_DIR.
 */
public class ThreadDir {

    private Long id;
    private Long dirId;
    private int threadId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ThreadDirDao myDao;

    private SmsDir smsDir;
    private Long smsDir__resolvedKey;


    public ThreadDir() {
    }

    public ThreadDir(Long id) {
        this.id = id;
    }

    public ThreadDir(Long id, Long dirId, int threadId) {
        this.id = id;
        this.dirId = dirId;
        this.threadId = threadId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getThreadDirDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getDirId() {
        return dirId;
    }

    public void setDirId(Long dirId) {
        this.dirId = dirId;
    }

    public int getThreadId() {
        return threadId;
    }

    public void setThreadId(int threadId) {
        this.threadId = threadId;
    }

    /** To-one relationship, resolved on first access. */
    public SmsDir getSmsDir() {
        Long __key = this.dirId;
        if (smsDir__resolvedKey == null || !smsDir__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SmsDirDao targetDao = daoSession.getSmsDirDao();
            SmsDir smsDirNew = targetDao.load(__key);
            synchronized (this) {
                smsDir = smsDirNew;
            	smsDir__resolvedKey = __key;
            }
        }
        return smsDir;
    }

    public void setSmsDir(SmsDir smsDir) {
        synchronized (this) {
            this.smsDir = smsDir;
            dirId = smsDir == null ? null : smsDir.getId();
            smsDir__resolvedKey = dirId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
